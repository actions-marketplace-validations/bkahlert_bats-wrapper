name: 'Bats tests'
author: 'BjÃ¶rn Kahlert'
description: 'Run Bats (Bash Automated Testing System) tests'
branding:
  icon: 'check'
  color: 'green'
inputs:
  filter:
    description: 'Only run tests that match the regular expression'
    required: false
  formatter:
    description: >
      Switch between formatters: pretty (default),
      tap (default w/o term), tap13, junit
    required: false
  gather-test-outputs-in:
    description: >
      Gather the output of failing *and* passing tests
      as files in directory
    required: false
  jobs:
    description: 'Number of parallel jobs'
    required: false
  no-tempdir-cleanup:
    description: 'Preserve test output temporary directory'
    required: false
  no-parallelize-across-files:
    description: >
      Serialize test file execution instead of running
      them in parallel (requires --jobs >1)
    required: false
  no-parallelize-within-files:
    description: >
      Serialize test execution within files instead of
      running them in parallel (requires --jobs >1)
    required: false
  report-formatter:
    description: 'Switch between reporters (same options as --formatter)'
    required: false
  output:
    description: 'Directory to write report files'
    required: false
  print-output-on-failure:
    description: 'Automatically print the value of `$output` on failed tests'
    required: false
  recursive:
    description: 'Include tests in subdirectories'
    required: false
  show-output-of-passing-tests:
    description: 'Print output of passing tests'
    required: false
  timing:
    description: 'Add timing information to tests'
    required: false
  trace:
    description: 'Print test commands as they are executed (like `set -x`)'
    required: false
  verbose-run:
    description: 'Make `run` print `$output` by default'
    required: false
  tests:
    description: >
      Path to a Bats test file, or to a directory containing
      Bats test files (ending with ".bats")
    required: true
outputs:
  status:
    description: 'Exit status/code of the test run'
    value: ${{ steps.bats-wrapper.outputs.status }}
  output:
    description: 'Output of the test run'
    value: ${{ steps.bats-wrapper.outputs.output }}
runs:
  using: 'composite'
  steps:
    - name: Run Bats tests
      id: bats-wrapper
      run: |
        set_multiline_output() {
          local name=${1?name missing} && shift
          local value=$*
          value="${value//'%'/'%25'}"
          value="${value//$'\n'/'%0A'}"
          value="${value//$'\r'/'%0D'}"
          echo ::set-output name="$name"::"$value"
        }

        declare -a input_tests=()
        while read -r input_test; do
          [ ! "${input_test-}" ] || input_tests+=("$input_test")
        done <<INPUT_TESTS
        ${{ inputs.tests }}
        INPUT_TESTS

        declare output
        output=$(
          declare -a opts=()
          [ ! "${{ inputs.filter }}" ] || opts+=("--filter" "${{ inputs.filter }}")
          [ ! "${{ inputs.formatter }}" ] || opts+=("--formatter" "${{ inputs.formatter }}")
          [ ! "${{ inputs.gather-test-outputs-in }}" ] || opts+=("--gather-test-outputs-in" "${{ inputs.gather-test-outputs-in }}")
          [ ! "${{ inputs.jobs }}" ] || opts+=("--jobs" "${{ inputs.jobs }}")
          [ ! "${{ inputs.no-tempdir-cleanup }}" ] || opts+=("--no-tempdir-cleanup" "${{ inputs.no-tempdir-cleanup }}")
          [ ! "${{ inputs.no-parallelize-across-files }}" ] || opts+=("--no-parallelize-across-files" "${{ inputs.no-parallelize-across-files }}")
          [ ! "${{ inputs.no-parallelize-within-files }}" ] || opts+=("--no-parallelize-within-files" "${{ inputs.no-parallelize-within-files }}")
          [ ! "${{ inputs.report-formatter }}" ] || opts+=("--report-formatter" "${{ inputs.report-formatter }}")
          [ ! "${{ inputs.output }}" ] || opts+=("--output" "${{ inputs.output }}")
          [ ! "${{ inputs.print-output-on-failure }}" ] || opts+=("--print-output-on-failure" "${{ inputs.print-output-on-failure }}")
          [ ! "${{ inputs.recursive }}" ] || opts+=("--recursive" "${{ inputs.recursive }}")
          [ ! "${{ inputs.show-output-of-passing-tests }}" ] || opts+=("--show-output-of-passing-tests" "${{ inputs.show-output-of-passing-tests }}")
          [ ! "${{ inputs.timing }}" ] || opts+=("--timing" "${{ inputs.timing }}")
          [ ! "${{ inputs.trace }}" ] || opts+=("--trace" "${{ inputs.trace }}")
          [ ! "${{ inputs.verbose-run }}" ] || opts+=("--verbose-run" "${{ inputs.verbose-run }}")
          curl -LfsS https://git.io/batsw | "$SHELL" -s -- "${opts[@]+"${opts[@]}"}" "${input_tests[@]+"${input_tests[@]}"}"
        )
        echo ::set-output name=status::"$?"
        set_multiline_output output "${output-}"
      shell: bash
